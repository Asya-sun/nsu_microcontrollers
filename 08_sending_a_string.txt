.include "m168def.inc"

.DSEG
string_buffer: .byte 51      ; ????? ?? 50 ???????? + CR
write_ptr:     .byte 2       ; ????????? ?????? (16-??????)
read_ptr:      .byte 2       ; ????????? ?????? (16-??????)
buffer_ready:  .byte 1       ; ???? ?????????? ??????
transmit_active: .byte 1     ; ???? ?????????? ????????

.CSEG
.org 0x0000
    rjmp start               ; Reset Handler
.org 0x0024
    rjmp USART_RX_ISR        ; USART Rx Complete
.org 0x0026
    rjmp USART_UDRE_ISR      ; USART UDRE Ready

.def tmp = r16

start:
    cli                      ; ????????? ??????????
    ; ????????????? ?????
    ldi tmp, LOW(RAMEND)
    out SPL, tmp
    ldi tmp, HIGH(RAMEND)
    out SPH, tmp

    ; ????????????? ??????????
    ldi XL, LOW(string_buffer)
    ldi XH, HIGH(string_buffer)
    sts write_ptr, XL
    sts write_ptr+1, XH
    sts read_ptr, XL
    sts read_ptr+1, XH

    clr tmp
    sts buffer_ready, tmp    ; ???????? ???? ??????????
    sts transmit_active, tmp ; ???????? ???? ????????

    rcall USART_Init
    sei                      ; ????????? ??????????

MAIN_LOOP:
    lds tmp, buffer_ready
    cpi tmp, 1
    brne MAIN_LOOP           ; ???? ?????????? ??????


	; ???????? ????????
    ldi tmp, 1
    sts transmit_active, tmp ; ?????????? ???? ????????
    clr tmp
    sts buffer_ready, tmp    ; ???????? ???? ??????????
    
    ; ????????? ?????? ?????? ??? ????????
    lds XL, read_ptr
    lds XH, read_ptr+1
    ld tmp, X+
	;
	; ???????? ????????? ??????
    sts read_ptr, XL
    sts read_ptr+1, XH

	; there's check if first bit == the last bit
	cpi tmp, 0x0D
	breq last_eq_first

send_first_last_bit:
	;
    sts UDR0, tmp            ; ????????? ????????
    
    
    rjmp MAIN_LOOP

last_eq_first:
	push tmp
	in tmp, SREG
    push tmp

	; ???????? ?????
    clr tmp
    sts transmit_active, tmp

    ; ???????? ?????????
    ldi XL, LOW(string_buffer)
    ldi XH, HIGH(string_buffer)
    sts read_ptr, XL
    sts read_ptr+1, XH
    sts write_ptr, XL
    sts write_ptr+1, XH

	pop tmp
    out SREG, tmp
    pop tmp
	rjmp send_first_last_bit


USART_Init:
    ; ????????? USART
    ldi tmp, (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0)|(1<<UDRIE0)
    sts UCSR0B, tmp

    ; ??????????? ?????, 8 ???
    ldi tmp, (1<<UCSZ01)|(1<<UCSZ00) 
    sts UCSR0C, tmp

    ; ????????? ???????? 9600 ??? 16 ???
    ldi tmp, HIGH(103)
    sts UBRR0H, tmp
    ldi tmp, LOW(103)
    sts UBRR0L, tmp
    ret

USART_RX_ISR:
    push tmp
    in tmp, SREG
    push tmp
    push XL
    push XH

    ; ????????? ????????? ??????
    lds XL, write_ptr
    lds XH, write_ptr+1

    ; ???????? ??????
    lds tmp, UDR0

    ; ????????? ?????? ? ????? (??????? CR)
    st X+, tmp

    ; ???????? ????????? ??????
    sts write_ptr, XL
    sts write_ptr+1, XH

    ; ????????? ?? ????? ?????? (CR)
    cpi tmp, 0x0D            
    breq rx_complete

    ; ????????? ???????????? ??????
    cpi XL, LOW(string_buffer + 50)
    brne rx_exit
    cpi XH, HIGH(string_buffer + 50)
    brne rx_exit

rx_complete:
    ; ?????????? ???? ??????????
    ldi tmp, 1
    sts buffer_ready, tmp

rx_exit:
    pop XH
    pop XL
    pop tmp
    out SREG, tmp
    pop tmp
    reti

USART_UDRE_ISR:
    push tmp
    in tmp, SREG
    push tmp
    push XL
    push XH

    ; ????????? ?????????? ????????
    lds tmp, transmit_active
    cpi tmp, 1
    brne udre_exit           ; ???? ???????? ?? ??????? - ?????

    ; ????????? ????????? ??????
    lds XL, read_ptr
    lds XH, read_ptr+1

    ; ????????? ?????????? ????? ?????? (CR)
    ld tmp, X
    cpi tmp, 0x0D
    breq transmission_done   ; ???? CR - ????????? ????????

    ; ????????? ????????? ??????
    ld tmp, X+
    sts UDR0, tmp

    ; ???????? ????????? ??????
    sts read_ptr, XL
    sts read_ptr+1, XH
    rjmp udre_exit

transmission_done:
    ; ????????? ????????? ?????? (CR)
    ld tmp, X+
    sts UDR0, tmp

    ; ???????? ?????
    clr tmp
    sts transmit_active, tmp

    ; ???????? ?????????
    ldi XL, LOW(string_buffer)
    ldi XH, HIGH(string_buffer)
    sts read_ptr, XL
    sts read_ptr+1, XH
    sts write_ptr, XL
    sts write_ptr+1, XH

udre_exit:
    pop XH
    pop XL
    pop tmp
    out SREG, tmp
    pop tmp
    reti