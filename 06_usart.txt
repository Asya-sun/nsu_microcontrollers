.include "m168def.inc"


.DSEG
.def tmp = r17




.CSEG
.org 0x00 ; 
    rjmp start ;




; ?? ???????? ??? ?? DDR y????????
; ? ??? UBRR0H, UBRR0L




start:
	cli ; interrupts off
	; stack making
	ldi tmp,Low(RAMEND) 
	out SPL,tmp
	ldi tmp,High(RAMEND)
	out SPH,tmp

	rcall init_usart
	
	sei ; interrupts on
	rjmp MAIN_LOOP




init_usart:
	; 8 bit
	;(0 << UCSZn2) ;UCSRnB
	;(1 << UCSZn1) ;UCSRnC
	;(1 << UCSZn0) ;UCSRnC

	ldi tmp, 0
	;RXEN - receiver enabled
	;TXEN - transmitter  enables
	ldi tmp, (1 << RXEN0) | (1 << TXEN0) | (0 << UCSZ02)
	sts UCSR0B, tmp


	ldi tmp, 0
	;UMSELn1 UMSELn0 - asynchromious USART
	; проверка на четность нужна?
	ldi tmp, (1 << UCSZ01) | (1 << UCSZ00) | (0 << UMSEL01) | (0 << UMSEL00)
	sts UCSR0C, tmp

	; fosc ???
	ldi tmp, high(51)
	sts UBRR0H, tmp
	ldi tmp, low(51)
	sts UBRR0L, tmp
	ret

	;ld - in
	;sts - out







MAIN_LOOP:
	rcall usart_receive
	rcall usart_transmit
    rjmp MAIN_LOOP ; ???????? ???? ?????????

	

usart_receive:
	; Wait for data to be received
	;sbis UCSR0A, RXC0
	;RXCn - Receive Complete
	lds tmp, UCSR0A
	sbrs tmp, RXC0
	rjmp USART_Receive
	; Get and return received data from buffer
	lds r16, UDR0
	ret

usart_transmit:
	; Wait for empty transmit buffer
	;sbis UCSR0A,UDRE0
	;UDRE0 - USART Data Register Empty
	lds tmp, UCSR0A
	sbrs tmp, UDRE0
	rjmp USART_Transmit
	; Put data (r16) into buffer, sends the data
	sts UDR0, r16
	ret